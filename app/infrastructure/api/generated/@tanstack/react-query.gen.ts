// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getConfigUsingGet, putConfigUsingPost, getConfigByTypeAndNameUsingGet, uploadFeedbackLogUsingPost, authorizeUsingGet, logoutUsingPost, signupUsingPost, tokenEndpointUsingPost, changePasswordUsingPatch, getProfileMeUsingGet, updateProfileUsingPatch, resetPasswordUsingPost, resetPasswordInitUsingPost1, resendVerificationEmailUsingPatch1, sendVerificationEmailUsingPost, getConfigUsingGet1, putConfigUsingPost1, listTimezonesUsingGet, putConfigUsingPost2, deleteUserConfigurationUsingDelete, getConfigByIdUsingGet, searchConfigsUsingPost, feedbackAndRatingUsingPost, multiFeedbackAndRatingUsingPost, getRatingConfigUsingGet, updateRatingConfigUsingPost, configForceUpdateMoappUsingPost, getForceUpdateMoappUsingGet, browseUserTrackingUsingPost, writeUserTrackingUsingPost, signupUsingPost1, tokenEndpointUsingPost1, resendVerificationEmailUsingPatch, deleteMyAccountUsingDelete, getAccountProfileUsingGet, updateAccountProfileUsingPut, resetPasswordInitUsingPost, leaveOrgUsingPost, pingUsingGet, createOrgUsingPost, deleteOrgUsingDelete, detailOrgUsingGet, listAdminManagerViewerOrgUsingGet, listAdminManagerOrgUsingGet, suspendOrgUsingPut, updateOrgUsingPut, createAccountFromInvitationUsingPost, deactivateUserUsingPut, deleteInvitationUsingDelete, listInvitationUsingGet, pageInvitationUsingGet, resendInvitationUsingPost, inviteUserUsingPost, listUserUsingGet, listRouterManagersUsingGet, updateUserProfileUsingPut, deleteAccountUsingDelete, getUserProfileUsingGet, browseUserTrackingUsingPost1, writeUserTrackingUsingPost1, exportUserListUsingPost, findUserListUsingPost, getOpenAppUsingGet, addUserOrganizationUsingPost, getAppConfigurationByTypeNameUsingGet, changeAuth0SignKeyUsingGet, batchUsersUsingPost, findOrgServiceByIdsUsingPost, clearAllUserSessionsUsingPost, deleteUserOrganizationDeviceManagerUsingPost, findOrganizationsAndRelateDataByIdsUsingPost, findOrganizationsByIdsUsingPost, findOrganizationsByTagsUsingPost, findOrganizationsRelateToUserUsingPost, isOrgValidUsingGet, findOrgUsingGet, findOrgDescendantsUsingGet, internalSendReportUserActivityUsingPost, getUsersByEmailsUsingPost, getUsersByIdsUsingPost, getAndroidInternalUsingGet, getIosConnectUsingGet, getIosInternalUsingGet, pemUsingGet, invalidLinkUsingGet, invitationSuccessUsingGet, resetPasswordUsingGet, resetPasswordPortalUsingGet, resetPasswordPortalSuccessUsingGet, resetPasswordSuccessUsingGet, verificationSuccessUsingGet, verifyEmailUsingGet, verifyInvitationUsingGet } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { GetConfigUsingGetData, PutConfigUsingPostData, PutConfigUsingPostResponse, GetConfigByTypeAndNameUsingGetData, UploadFeedbackLogUsingPostData, UploadFeedbackLogUsingPostResponse, AuthorizeUsingGetData, LogoutUsingPostData, LogoutUsingPostResponse, SignupUsingPostData, SignupUsingPostResponse, TokenEndpointUsingPostData, TokenEndpointUsingPostResponse, ChangePasswordUsingPatchData, ChangePasswordUsingPatchResponse, GetProfileMeUsingGetData, UpdateProfileUsingPatchData, UpdateProfileUsingPatchResponse, ResetPasswordUsingPostData, ResetPasswordUsingPostResponse, ResetPasswordInitUsingPost1Data, ResetPasswordInitUsingPost1Response, ResendVerificationEmailUsingPatch1Data, ResendVerificationEmailUsingPatch1Response, SendVerificationEmailUsingPostData, SendVerificationEmailUsingPostResponse, GetConfigUsingGet1Data, PutConfigUsingPost1Data, PutConfigUsingPost1Response, ListTimezonesUsingGetData, PutConfigUsingPost2Data, PutConfigUsingPost2Response, DeleteUserConfigurationUsingDeleteData, DeleteUserConfigurationUsingDeleteResponse, GetConfigByIdUsingGetData, SearchConfigsUsingPostData, SearchConfigsUsingPostResponse, FeedbackAndRatingUsingPostData, FeedbackAndRatingUsingPostResponse, MultiFeedbackAndRatingUsingPostData, MultiFeedbackAndRatingUsingPostResponse, GetRatingConfigUsingGetData, UpdateRatingConfigUsingPostData, UpdateRatingConfigUsingPostResponse, ConfigForceUpdateMoappUsingPostData, ConfigForceUpdateMoappUsingPostResponse, GetForceUpdateMoappUsingGetData, BrowseUserTrackingUsingPostData, BrowseUserTrackingUsingPostResponse, WriteUserTrackingUsingPostData, WriteUserTrackingUsingPostResponse, SignupUsingPost1Data, SignupUsingPost1Response, TokenEndpointUsingPost1Data, TokenEndpointUsingPost1Response, ResendVerificationEmailUsingPatchData, ResendVerificationEmailUsingPatchResponse, DeleteMyAccountUsingDeleteData, DeleteMyAccountUsingDeleteResponse, GetAccountProfileUsingGetData, UpdateAccountProfileUsingPutData, UpdateAccountProfileUsingPutResponse, ResetPasswordInitUsingPostData, ResetPasswordInitUsingPostResponse, LeaveOrgUsingPostData, LeaveOrgUsingPostResponse, PingUsingGetData, CreateOrgUsingPostData, CreateOrgUsingPostResponse, DeleteOrgUsingDeleteData, DeleteOrgUsingDeleteResponse, DetailOrgUsingGetData, ListAdminManagerViewerOrgUsingGetData, ListAdminManagerOrgUsingGetData, SuspendOrgUsingPutData, SuspendOrgUsingPutResponse, UpdateOrgUsingPutData, UpdateOrgUsingPutResponse, CreateAccountFromInvitationUsingPostData, CreateAccountFromInvitationUsingPostResponse, DeactivateUserUsingPutData, DeactivateUserUsingPutResponse, DeleteInvitationUsingDeleteData, DeleteInvitationUsingDeleteResponse, ListInvitationUsingGetData, PageInvitationUsingGetData, PageInvitationUsingGetResponse, ResendInvitationUsingPostData, ResendInvitationUsingPostResponse, InviteUserUsingPostData, InviteUserUsingPostResponse, ListUserUsingGetData, ListUserUsingGetResponse, ListRouterManagersUsingGetData, UpdateUserProfileUsingPutData, UpdateUserProfileUsingPutResponse, DeleteAccountUsingDeleteData, DeleteAccountUsingDeleteResponse, GetUserProfileUsingGetData, BrowseUserTrackingUsingPost1Data, BrowseUserTrackingUsingPost1Response, WriteUserTrackingUsingPost1Data, WriteUserTrackingUsingPost1Response, ExportUserListUsingPostData, FindUserListUsingPostData, FindUserListUsingPostResponse, GetOpenAppUsingGetData, AddUserOrganizationUsingPostData, AddUserOrganizationUsingPostResponse, GetAppConfigurationByTypeNameUsingGetData, ChangeAuth0SignKeyUsingGetData, BatchUsersUsingPostData, BatchUsersUsingPostResponse, FindOrgServiceByIdsUsingPostData, FindOrgServiceByIdsUsingPostResponse, ClearAllUserSessionsUsingPostData, ClearAllUserSessionsUsingPostResponse, DeleteUserOrganizationDeviceManagerUsingPostData, DeleteUserOrganizationDeviceManagerUsingPostResponse, FindOrganizationsAndRelateDataByIdsUsingPostData, FindOrganizationsAndRelateDataByIdsUsingPostResponse, FindOrganizationsByIdsUsingPostData, FindOrganizationsByIdsUsingPostResponse, FindOrganizationsByTagsUsingPostData, FindOrganizationsByTagsUsingPostResponse, FindOrganizationsRelateToUserUsingPostData, FindOrganizationsRelateToUserUsingPostResponse, IsOrgValidUsingGetData, FindOrgUsingGetData, FindOrgDescendantsUsingGetData, InternalSendReportUserActivityUsingPostData, InternalSendReportUserActivityUsingPostResponse, GetUsersByEmailsUsingPostData, GetUsersByEmailsUsingPostResponse, GetUsersByIdsUsingPostData, GetUsersByIdsUsingPostResponse, GetAndroidInternalUsingGetData, GetIosConnectUsingGetData, GetIosInternalUsingGetData, PemUsingGetData, InvalidLinkUsingGetData, InvitationSuccessUsingGetData, ResetPasswordUsingGetData, ResetPasswordPortalUsingGetData, ResetPasswordPortalSuccessUsingGetData, ResetPasswordSuccessUsingGetData, VerificationSuccessUsingGetData, VerifyEmailUsingGetData, VerifyInvitationUsingGetData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getConfigUsingGetQueryKey = (options: Options<GetConfigUsingGetData>) => createQueryKey('getConfigUsingGet', options);

export const getConfigUsingGetOptions = (options: Options<GetConfigUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigUsingGetQueryKey(options)
    });
};

export const putConfigUsingPostQueryKey = (options: Options<PutConfigUsingPostData>) => createQueryKey('putConfigUsingPost', options);

export const putConfigUsingPostOptions = (options: Options<PutConfigUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await putConfigUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: putConfigUsingPostQueryKey(options)
    });
};

export const putConfigUsingPostMutation = (options?: Partial<Options<PutConfigUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<PutConfigUsingPostResponse, AxiosError<DefaultError>, Options<PutConfigUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putConfigUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConfigByTypeAndNameUsingGetQueryKey = (options: Options<GetConfigByTypeAndNameUsingGetData>) => createQueryKey('getConfigByTypeAndNameUsingGet', options);

export const getConfigByTypeAndNameUsingGetOptions = (options: Options<GetConfigByTypeAndNameUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigByTypeAndNameUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigByTypeAndNameUsingGetQueryKey(options)
    });
};

export const uploadFeedbackLogUsingPostQueryKey = (options: Options<UploadFeedbackLogUsingPostData>) => createQueryKey('uploadFeedbackLogUsingPost', options);

export const uploadFeedbackLogUsingPostOptions = (options: Options<UploadFeedbackLogUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadFeedbackLogUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadFeedbackLogUsingPostQueryKey(options)
    });
};

export const uploadFeedbackLogUsingPostMutation = (options?: Partial<Options<UploadFeedbackLogUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<UploadFeedbackLogUsingPostResponse, AxiosError<DefaultError>, Options<UploadFeedbackLogUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadFeedbackLogUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authorizeUsingGetQueryKey = (options: Options<AuthorizeUsingGetData>) => createQueryKey('authorizeUsingGet', options);

export const authorizeUsingGetOptions = (options: Options<AuthorizeUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authorizeUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authorizeUsingGetQueryKey(options)
    });
};

export const logoutUsingPostQueryKey = (options: Options<LogoutUsingPostData>) => createQueryKey('logoutUsingPost', options);

export const logoutUsingPostOptions = (options: Options<LogoutUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logoutUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutUsingPostQueryKey(options)
    });
};

export const logoutUsingPostMutation = (options?: Partial<Options<LogoutUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<LogoutUsingPostResponse, AxiosError<DefaultError>, Options<LogoutUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await logoutUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const signupUsingPostQueryKey = (options: Options<SignupUsingPostData>) => createQueryKey('signupUsingPost', options);

export const signupUsingPostOptions = (options: Options<SignupUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await signupUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: signupUsingPostQueryKey(options)
    });
};

export const signupUsingPostMutation = (options?: Partial<Options<SignupUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<SignupUsingPostResponse, AxiosError<DefaultError>, Options<SignupUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await signupUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tokenEndpointUsingPostQueryKey = (options: Options<TokenEndpointUsingPostData>) => createQueryKey('tokenEndpointUsingPost', options);

export const tokenEndpointUsingPostOptions = (options: Options<TokenEndpointUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tokenEndpointUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tokenEndpointUsingPostQueryKey(options)
    });
};

export const tokenEndpointUsingPostMutation = (options?: Partial<Options<TokenEndpointUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<TokenEndpointUsingPostResponse, AxiosError<DefaultError>, Options<TokenEndpointUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tokenEndpointUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const changePasswordUsingPatchMutation = (options?: Partial<Options<ChangePasswordUsingPatchData>>) => {
    const mutationOptions: UseMutationOptions<ChangePasswordUsingPatchResponse, AxiosError<DefaultError>, Options<ChangePasswordUsingPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await changePasswordUsingPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProfileMeUsingGetQueryKey = (options: Options<GetProfileMeUsingGetData>) => createQueryKey('getProfileMeUsingGet', options);

export const getProfileMeUsingGetOptions = (options: Options<GetProfileMeUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProfileMeUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProfileMeUsingGetQueryKey(options)
    });
};

export const updateProfileUsingPatchMutation = (options?: Partial<Options<UpdateProfileUsingPatchData>>) => {
    const mutationOptions: UseMutationOptions<UpdateProfileUsingPatchResponse, AxiosError<DefaultError>, Options<UpdateProfileUsingPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateProfileUsingPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetPasswordUsingPostQueryKey = (options: Options<ResetPasswordUsingPostData>) => createQueryKey('resetPasswordUsingPost', options);

export const resetPasswordUsingPostOptions = (options: Options<ResetPasswordUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordUsingPostQueryKey(options)
    });
};

export const resetPasswordUsingPostMutation = (options?: Partial<Options<ResetPasswordUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<ResetPasswordUsingPostResponse, AxiosError<DefaultError>, Options<ResetPasswordUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetPasswordUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetPasswordInitUsingPost1QueryKey = (options: Options<ResetPasswordInitUsingPost1Data>) => createQueryKey('resetPasswordInitUsingPost1', options);

export const resetPasswordInitUsingPost1Options = (options: Options<ResetPasswordInitUsingPost1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordInitUsingPost1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordInitUsingPost1QueryKey(options)
    });
};

export const resetPasswordInitUsingPost1Mutation = (options?: Partial<Options<ResetPasswordInitUsingPost1Data>>) => {
    const mutationOptions: UseMutationOptions<ResetPasswordInitUsingPost1Response, AxiosError<DefaultError>, Options<ResetPasswordInitUsingPost1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetPasswordInitUsingPost1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resendVerificationEmailUsingPatch1Mutation = (options?: Partial<Options<ResendVerificationEmailUsingPatch1Data>>) => {
    const mutationOptions: UseMutationOptions<ResendVerificationEmailUsingPatch1Response, AxiosError<DefaultError>, Options<ResendVerificationEmailUsingPatch1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resendVerificationEmailUsingPatch1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const sendVerificationEmailUsingPostQueryKey = (options: Options<SendVerificationEmailUsingPostData>) => createQueryKey('sendVerificationEmailUsingPost', options);

export const sendVerificationEmailUsingPostOptions = (options: Options<SendVerificationEmailUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await sendVerificationEmailUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: sendVerificationEmailUsingPostQueryKey(options)
    });
};

export const sendVerificationEmailUsingPostMutation = (options?: Partial<Options<SendVerificationEmailUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<SendVerificationEmailUsingPostResponse, AxiosError<DefaultError>, Options<SendVerificationEmailUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await sendVerificationEmailUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConfigUsingGet1QueryKey = (options: Options<GetConfigUsingGet1Data>) => createQueryKey('getConfigUsingGet1', options);

export const getConfigUsingGet1Options = (options: Options<GetConfigUsingGet1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigUsingGet1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigUsingGet1QueryKey(options)
    });
};

export const putConfigUsingPost1QueryKey = (options: Options<PutConfigUsingPost1Data>) => createQueryKey('putConfigUsingPost1', options);

export const putConfigUsingPost1Options = (options: Options<PutConfigUsingPost1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await putConfigUsingPost1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: putConfigUsingPost1QueryKey(options)
    });
};

export const putConfigUsingPost1Mutation = (options?: Partial<Options<PutConfigUsingPost1Data>>) => {
    const mutationOptions: UseMutationOptions<PutConfigUsingPost1Response, AxiosError<DefaultError>, Options<PutConfigUsingPost1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putConfigUsingPost1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTimezonesUsingGetQueryKey = (options: Options<ListTimezonesUsingGetData>) => createQueryKey('listTimezonesUsingGet', options);

export const listTimezonesUsingGetOptions = (options: Options<ListTimezonesUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTimezonesUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTimezonesUsingGetQueryKey(options)
    });
};

export const putConfigUsingPost2QueryKey = (options: Options<PutConfigUsingPost2Data>) => createQueryKey('putConfigUsingPost2', options);

export const putConfigUsingPost2Options = (options: Options<PutConfigUsingPost2Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await putConfigUsingPost2({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: putConfigUsingPost2QueryKey(options)
    });
};

export const putConfigUsingPost2Mutation = (options?: Partial<Options<PutConfigUsingPost2Data>>) => {
    const mutationOptions: UseMutationOptions<PutConfigUsingPost2Response, AxiosError<DefaultError>, Options<PutConfigUsingPost2Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putConfigUsingPost2({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUserConfigurationUsingDeleteMutation = (options?: Partial<Options<DeleteUserConfigurationUsingDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteUserConfigurationUsingDeleteResponse, AxiosError<DefaultError>, Options<DeleteUserConfigurationUsingDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserConfigurationUsingDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConfigByIdUsingGetQueryKey = (options: Options<GetConfigByIdUsingGetData>) => createQueryKey('getConfigByIdUsingGet', options);

export const getConfigByIdUsingGetOptions = (options: Options<GetConfigByIdUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigByIdUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigByIdUsingGetQueryKey(options)
    });
};

export const searchConfigsUsingPostQueryKey = (options: Options<SearchConfigsUsingPostData>) => createQueryKey('searchConfigsUsingPost', options);

export const searchConfigsUsingPostOptions = (options: Options<SearchConfigsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await searchConfigsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchConfigsUsingPostQueryKey(options)
    });
};

export const searchConfigsUsingPostMutation = (options?: Partial<Options<SearchConfigsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<SearchConfigsUsingPostResponse, AxiosError<DefaultError>, Options<SearchConfigsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await searchConfigsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const feedbackAndRatingUsingPostQueryKey = (options: Options<FeedbackAndRatingUsingPostData>) => createQueryKey('feedbackAndRatingUsingPost', options);

export const feedbackAndRatingUsingPostOptions = (options: Options<FeedbackAndRatingUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await feedbackAndRatingUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: feedbackAndRatingUsingPostQueryKey(options)
    });
};

export const feedbackAndRatingUsingPostMutation = (options?: Partial<Options<FeedbackAndRatingUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<FeedbackAndRatingUsingPostResponse, AxiosError<DefaultError>, Options<FeedbackAndRatingUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await feedbackAndRatingUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const multiFeedbackAndRatingUsingPostQueryKey = (options: Options<MultiFeedbackAndRatingUsingPostData>) => createQueryKey('multiFeedbackAndRatingUsingPost', options);

export const multiFeedbackAndRatingUsingPostOptions = (options: Options<MultiFeedbackAndRatingUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await multiFeedbackAndRatingUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: multiFeedbackAndRatingUsingPostQueryKey(options)
    });
};

export const multiFeedbackAndRatingUsingPostMutation = (options?: Partial<Options<MultiFeedbackAndRatingUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<MultiFeedbackAndRatingUsingPostResponse, AxiosError<DefaultError>, Options<MultiFeedbackAndRatingUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await multiFeedbackAndRatingUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getRatingConfigUsingGetQueryKey = (options: Options<GetRatingConfigUsingGetData>) => createQueryKey('getRatingConfigUsingGet', options);

export const getRatingConfigUsingGetOptions = (options: Options<GetRatingConfigUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRatingConfigUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRatingConfigUsingGetQueryKey(options)
    });
};

export const updateRatingConfigUsingPostQueryKey = (options: Options<UpdateRatingConfigUsingPostData>) => createQueryKey('updateRatingConfigUsingPost', options);

export const updateRatingConfigUsingPostOptions = (options: Options<UpdateRatingConfigUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await updateRatingConfigUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: updateRatingConfigUsingPostQueryKey(options)
    });
};

export const updateRatingConfigUsingPostMutation = (options?: Partial<Options<UpdateRatingConfigUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<UpdateRatingConfigUsingPostResponse, AxiosError<DefaultError>, Options<UpdateRatingConfigUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateRatingConfigUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const configForceUpdateMoappUsingPostQueryKey = (options: Options<ConfigForceUpdateMoappUsingPostData>) => createQueryKey('configForceUpdateMoappUsingPost', options);

export const configForceUpdateMoappUsingPostOptions = (options: Options<ConfigForceUpdateMoappUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await configForceUpdateMoappUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: configForceUpdateMoappUsingPostQueryKey(options)
    });
};

export const configForceUpdateMoappUsingPostMutation = (options?: Partial<Options<ConfigForceUpdateMoappUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<ConfigForceUpdateMoappUsingPostResponse, AxiosError<DefaultError>, Options<ConfigForceUpdateMoappUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await configForceUpdateMoappUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getForceUpdateMoappUsingGetQueryKey = (options: Options<GetForceUpdateMoappUsingGetData>) => createQueryKey('getForceUpdateMoappUsingGet', options);

export const getForceUpdateMoappUsingGetOptions = (options: Options<GetForceUpdateMoappUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getForceUpdateMoappUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getForceUpdateMoappUsingGetQueryKey(options)
    });
};

export const browseUserTrackingUsingPostQueryKey = (options: Options<BrowseUserTrackingUsingPostData>) => createQueryKey('browseUserTrackingUsingPost', options);

export const browseUserTrackingUsingPostOptions = (options: Options<BrowseUserTrackingUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await browseUserTrackingUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: browseUserTrackingUsingPostQueryKey(options)
    });
};

export const browseUserTrackingUsingPostMutation = (options?: Partial<Options<BrowseUserTrackingUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<BrowseUserTrackingUsingPostResponse, AxiosError<DefaultError>, Options<BrowseUserTrackingUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await browseUserTrackingUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const writeUserTrackingUsingPostQueryKey = (options: Options<WriteUserTrackingUsingPostData>) => createQueryKey('writeUserTrackingUsingPost', options);

export const writeUserTrackingUsingPostOptions = (options: Options<WriteUserTrackingUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await writeUserTrackingUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: writeUserTrackingUsingPostQueryKey(options)
    });
};

export const writeUserTrackingUsingPostMutation = (options?: Partial<Options<WriteUserTrackingUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<WriteUserTrackingUsingPostResponse, AxiosError<DefaultError>, Options<WriteUserTrackingUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await writeUserTrackingUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const signupUsingPost1QueryKey = (options: Options<SignupUsingPost1Data>) => createQueryKey('signupUsingPost1', options);

export const signupUsingPost1Options = (options: Options<SignupUsingPost1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await signupUsingPost1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: signupUsingPost1QueryKey(options)
    });
};

export const signupUsingPost1Mutation = (options?: Partial<Options<SignupUsingPost1Data>>) => {
    const mutationOptions: UseMutationOptions<SignupUsingPost1Response, AxiosError<DefaultError>, Options<SignupUsingPost1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await signupUsingPost1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const tokenEndpointUsingPost1QueryKey = (options: Options<TokenEndpointUsingPost1Data>) => createQueryKey('tokenEndpointUsingPost1', options);

export const tokenEndpointUsingPost1Options = (options: Options<TokenEndpointUsingPost1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await tokenEndpointUsingPost1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: tokenEndpointUsingPost1QueryKey(options)
    });
};

export const tokenEndpointUsingPost1Mutation = (options?: Partial<Options<TokenEndpointUsingPost1Data>>) => {
    const mutationOptions: UseMutationOptions<TokenEndpointUsingPost1Response, AxiosError<DefaultError>, Options<TokenEndpointUsingPost1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await tokenEndpointUsingPost1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resendVerificationEmailUsingPatchMutation = (options?: Partial<Options<ResendVerificationEmailUsingPatchData>>) => {
    const mutationOptions: UseMutationOptions<ResendVerificationEmailUsingPatchResponse, AxiosError<DefaultError>, Options<ResendVerificationEmailUsingPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resendVerificationEmailUsingPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteMyAccountUsingDeleteMutation = (options?: Partial<Options<DeleteMyAccountUsingDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteMyAccountUsingDeleteResponse, AxiosError<DefaultError>, Options<DeleteMyAccountUsingDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteMyAccountUsingDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAccountProfileUsingGetQueryKey = (options: Options<GetAccountProfileUsingGetData>) => createQueryKey('getAccountProfileUsingGet', options);

export const getAccountProfileUsingGetOptions = (options: Options<GetAccountProfileUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAccountProfileUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAccountProfileUsingGetQueryKey(options)
    });
};

export const updateAccountProfileUsingPutMutation = (options?: Partial<Options<UpdateAccountProfileUsingPutData>>) => {
    const mutationOptions: UseMutationOptions<UpdateAccountProfileUsingPutResponse, AxiosError<DefaultError>, Options<UpdateAccountProfileUsingPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateAccountProfileUsingPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetPasswordInitUsingPostQueryKey = (options: Options<ResetPasswordInitUsingPostData>) => createQueryKey('resetPasswordInitUsingPost', options);

export const resetPasswordInitUsingPostOptions = (options: Options<ResetPasswordInitUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordInitUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordInitUsingPostQueryKey(options)
    });
};

export const resetPasswordInitUsingPostMutation = (options?: Partial<Options<ResetPasswordInitUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<ResetPasswordInitUsingPostResponse, AxiosError<DefaultError>, Options<ResetPasswordInitUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetPasswordInitUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const leaveOrgUsingPostQueryKey = (options: Options<LeaveOrgUsingPostData>) => createQueryKey('leaveOrgUsingPost', options);

export const leaveOrgUsingPostOptions = (options: Options<LeaveOrgUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await leaveOrgUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: leaveOrgUsingPostQueryKey(options)
    });
};

export const leaveOrgUsingPostMutation = (options?: Partial<Options<LeaveOrgUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<LeaveOrgUsingPostResponse, AxiosError<DefaultError>, Options<LeaveOrgUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await leaveOrgUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const pingUsingGetQueryKey = (options: Options<PingUsingGetData>) => createQueryKey('pingUsingGet', options);

export const pingUsingGetOptions = (options: Options<PingUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await pingUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: pingUsingGetQueryKey(options)
    });
};

export const createOrgUsingPostQueryKey = (options: Options<CreateOrgUsingPostData>) => createQueryKey('createOrgUsingPost', options);

export const createOrgUsingPostOptions = (options: Options<CreateOrgUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createOrgUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createOrgUsingPostQueryKey(options)
    });
};

export const createOrgUsingPostMutation = (options?: Partial<Options<CreateOrgUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<CreateOrgUsingPostResponse, AxiosError<DefaultError>, Options<CreateOrgUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createOrgUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteOrgUsingDeleteMutation = (options?: Partial<Options<DeleteOrgUsingDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteOrgUsingDeleteResponse, AxiosError<DefaultError>, Options<DeleteOrgUsingDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteOrgUsingDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const detailOrgUsingGetQueryKey = (options: Options<DetailOrgUsingGetData>) => createQueryKey('detailOrgUsingGet', options);

export const detailOrgUsingGetOptions = (options: Options<DetailOrgUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await detailOrgUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: detailOrgUsingGetQueryKey(options)
    });
};

export const listAdminManagerViewerOrgUsingGetQueryKey = (options: Options<ListAdminManagerViewerOrgUsingGetData>) => createQueryKey('listAdminManagerViewerOrgUsingGet', options);

export const listAdminManagerViewerOrgUsingGetOptions = (options: Options<ListAdminManagerViewerOrgUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAdminManagerViewerOrgUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAdminManagerViewerOrgUsingGetQueryKey(options)
    });
};

export const listAdminManagerOrgUsingGetQueryKey = (options: Options<ListAdminManagerOrgUsingGetData>) => createQueryKey('listAdminManagerOrgUsingGet', options);

export const listAdminManagerOrgUsingGetOptions = (options: Options<ListAdminManagerOrgUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAdminManagerOrgUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAdminManagerOrgUsingGetQueryKey(options)
    });
};

export const suspendOrgUsingPutMutation = (options?: Partial<Options<SuspendOrgUsingPutData>>) => {
    const mutationOptions: UseMutationOptions<SuspendOrgUsingPutResponse, AxiosError<DefaultError>, Options<SuspendOrgUsingPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await suspendOrgUsingPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateOrgUsingPutMutation = (options?: Partial<Options<UpdateOrgUsingPutData>>) => {
    const mutationOptions: UseMutationOptions<UpdateOrgUsingPutResponse, AxiosError<DefaultError>, Options<UpdateOrgUsingPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateOrgUsingPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createAccountFromInvitationUsingPostQueryKey = (options: Options<CreateAccountFromInvitationUsingPostData>) => createQueryKey('createAccountFromInvitationUsingPost', options);

export const createAccountFromInvitationUsingPostOptions = (options: Options<CreateAccountFromInvitationUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createAccountFromInvitationUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createAccountFromInvitationUsingPostQueryKey(options)
    });
};

export const createAccountFromInvitationUsingPostMutation = (options?: Partial<Options<CreateAccountFromInvitationUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<CreateAccountFromInvitationUsingPostResponse, AxiosError<DefaultError>, Options<CreateAccountFromInvitationUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createAccountFromInvitationUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deactivateUserUsingPutMutation = (options?: Partial<Options<DeactivateUserUsingPutData>>) => {
    const mutationOptions: UseMutationOptions<DeactivateUserUsingPutResponse, AxiosError<DefaultError>, Options<DeactivateUserUsingPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deactivateUserUsingPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteInvitationUsingDeleteMutation = (options?: Partial<Options<DeleteInvitationUsingDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteInvitationUsingDeleteResponse, AxiosError<DefaultError>, Options<DeleteInvitationUsingDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteInvitationUsingDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listInvitationUsingGetQueryKey = (options: Options<ListInvitationUsingGetData>) => createQueryKey('listInvitationUsingGet', options);

export const listInvitationUsingGetOptions = (options: Options<ListInvitationUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listInvitationUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listInvitationUsingGetQueryKey(options)
    });
};

export const pageInvitationUsingGetQueryKey = (options: Options<PageInvitationUsingGetData>) => createQueryKey('pageInvitationUsingGet', options);

export const pageInvitationUsingGetOptions = (options: Options<PageInvitationUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await pageInvitationUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: pageInvitationUsingGetQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const pageInvitationUsingGetInfiniteQueryKey = (options: Options<PageInvitationUsingGetData>): QueryKey<Options<PageInvitationUsingGetData>> => createQueryKey('pageInvitationUsingGet', options, true);

export const pageInvitationUsingGetInfiniteOptions = (options: Options<PageInvitationUsingGetData>) => {
    return infiniteQueryOptions<PageInvitationUsingGetResponse, AxiosError<DefaultError>, InfiniteData<PageInvitationUsingGetResponse>, QueryKey<Options<PageInvitationUsingGetData>>, number | Pick<QueryKey<Options<PageInvitationUsingGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<PageInvitationUsingGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await pageInvitationUsingGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: pageInvitationUsingGetInfiniteQueryKey(options)
    });
};

export const resendInvitationUsingPostQueryKey = (options: Options<ResendInvitationUsingPostData>) => createQueryKey('resendInvitationUsingPost', options);

export const resendInvitationUsingPostOptions = (options: Options<ResendInvitationUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resendInvitationUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resendInvitationUsingPostQueryKey(options)
    });
};

export const resendInvitationUsingPostMutation = (options?: Partial<Options<ResendInvitationUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<ResendInvitationUsingPostResponse, AxiosError<DefaultError>, Options<ResendInvitationUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resendInvitationUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const inviteUserUsingPostQueryKey = (options: Options<InviteUserUsingPostData>) => createQueryKey('inviteUserUsingPost', options);

export const inviteUserUsingPostOptions = (options: Options<InviteUserUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await inviteUserUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: inviteUserUsingPostQueryKey(options)
    });
};

export const inviteUserUsingPostMutation = (options?: Partial<Options<InviteUserUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<InviteUserUsingPostResponse, AxiosError<DefaultError>, Options<InviteUserUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await inviteUserUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listUserUsingGetQueryKey = (options: Options<ListUserUsingGetData>) => createQueryKey('listUserUsingGet', options);

export const listUserUsingGetOptions = (options: Options<ListUserUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUserUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUserUsingGetQueryKey(options)
    });
};

export const listUserUsingGetInfiniteQueryKey = (options: Options<ListUserUsingGetData>): QueryKey<Options<ListUserUsingGetData>> => createQueryKey('listUserUsingGet', options, true);

export const listUserUsingGetInfiniteOptions = (options: Options<ListUserUsingGetData>) => {
    return infiniteQueryOptions<ListUserUsingGetResponse, AxiosError<DefaultError>, InfiniteData<ListUserUsingGetResponse>, QueryKey<Options<ListUserUsingGetData>>, number | Pick<QueryKey<Options<ListUserUsingGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListUserUsingGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listUserUsingGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUserUsingGetInfiniteQueryKey(options)
    });
};

export const listRouterManagersUsingGetQueryKey = (options: Options<ListRouterManagersUsingGetData>) => createQueryKey('listRouterManagersUsingGet', options);

export const listRouterManagersUsingGetOptions = (options: Options<ListRouterManagersUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listRouterManagersUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRouterManagersUsingGetQueryKey(options)
    });
};

export const updateUserProfileUsingPutMutation = (options?: Partial<Options<UpdateUserProfileUsingPutData>>) => {
    const mutationOptions: UseMutationOptions<UpdateUserProfileUsingPutResponse, AxiosError<DefaultError>, Options<UpdateUserProfileUsingPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUserProfileUsingPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAccountUsingDeleteMutation = (options?: Partial<Options<DeleteAccountUsingDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteAccountUsingDeleteResponse, AxiosError<DefaultError>, Options<DeleteAccountUsingDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteAccountUsingDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserProfileUsingGetQueryKey = (options: Options<GetUserProfileUsingGetData>) => createQueryKey('getUserProfileUsingGet', options);

export const getUserProfileUsingGetOptions = (options: Options<GetUserProfileUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserProfileUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserProfileUsingGetQueryKey(options)
    });
};

export const browseUserTrackingUsingPost1QueryKey = (options: Options<BrowseUserTrackingUsingPost1Data>) => createQueryKey('browseUserTrackingUsingPost1', options);

export const browseUserTrackingUsingPost1Options = (options: Options<BrowseUserTrackingUsingPost1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await browseUserTrackingUsingPost1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: browseUserTrackingUsingPost1QueryKey(options)
    });
};

export const browseUserTrackingUsingPost1Mutation = (options?: Partial<Options<BrowseUserTrackingUsingPost1Data>>) => {
    const mutationOptions: UseMutationOptions<BrowseUserTrackingUsingPost1Response, AxiosError<DefaultError>, Options<BrowseUserTrackingUsingPost1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await browseUserTrackingUsingPost1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const writeUserTrackingUsingPost1QueryKey = (options: Options<WriteUserTrackingUsingPost1Data>) => createQueryKey('writeUserTrackingUsingPost1', options);

export const writeUserTrackingUsingPost1Options = (options: Options<WriteUserTrackingUsingPost1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await writeUserTrackingUsingPost1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: writeUserTrackingUsingPost1QueryKey(options)
    });
};

export const writeUserTrackingUsingPost1Mutation = (options?: Partial<Options<WriteUserTrackingUsingPost1Data>>) => {
    const mutationOptions: UseMutationOptions<WriteUserTrackingUsingPost1Response, AxiosError<DefaultError>, Options<WriteUserTrackingUsingPost1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await writeUserTrackingUsingPost1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const exportUserListUsingPostQueryKey = (options: Options<ExportUserListUsingPostData>) => createQueryKey('exportUserListUsingPost', options);

export const exportUserListUsingPostOptions = (options: Options<ExportUserListUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await exportUserListUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: exportUserListUsingPostQueryKey(options)
    });
};

export const exportUserListUsingPostMutation = (options?: Partial<Options<ExportUserListUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ExportUserListUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await exportUserListUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findUserListUsingPostQueryKey = (options: Options<FindUserListUsingPostData>) => createQueryKey('findUserListUsingPost', options);

export const findUserListUsingPostOptions = (options: Options<FindUserListUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findUserListUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findUserListUsingPostQueryKey(options)
    });
};

export const findUserListUsingPostInfiniteQueryKey = (options: Options<FindUserListUsingPostData>): QueryKey<Options<FindUserListUsingPostData>> => createQueryKey('findUserListUsingPost', options, true);

export const findUserListUsingPostInfiniteOptions = (options: Options<FindUserListUsingPostData>) => {
    return infiniteQueryOptions<FindUserListUsingPostResponse, AxiosError<DefaultError>, InfiniteData<FindUserListUsingPostResponse>, QueryKey<Options<FindUserListUsingPostData>>, number | Pick<QueryKey<Options<FindUserListUsingPostData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindUserListUsingPostData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                body: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findUserListUsingPost({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findUserListUsingPostInfiniteQueryKey(options)
    });
};

export const findUserListUsingPostMutation = (options?: Partial<Options<FindUserListUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<FindUserListUsingPostResponse, AxiosError<DefaultError>, Options<FindUserListUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findUserListUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOpenAppUsingGetQueryKey = (options: Options<GetOpenAppUsingGetData>) => createQueryKey('getOpenAppUsingGet', options);

export const getOpenAppUsingGetOptions = (options: Options<GetOpenAppUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOpenAppUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOpenAppUsingGetQueryKey(options)
    });
};

export const addUserOrganizationUsingPostQueryKey = (options: Options<AddUserOrganizationUsingPostData>) => createQueryKey('addUserOrganizationUsingPost', options);

export const addUserOrganizationUsingPostOptions = (options: Options<AddUserOrganizationUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addUserOrganizationUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addUserOrganizationUsingPostQueryKey(options)
    });
};

export const addUserOrganizationUsingPostMutation = (options?: Partial<Options<AddUserOrganizationUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<AddUserOrganizationUsingPostResponse, AxiosError<DefaultError>, Options<AddUserOrganizationUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addUserOrganizationUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAppConfigurationByTypeNameUsingGetQueryKey = (options: Options<GetAppConfigurationByTypeNameUsingGetData>) => createQueryKey('getAppConfigurationByTypeNameUsingGet', options);

export const getAppConfigurationByTypeNameUsingGetOptions = (options: Options<GetAppConfigurationByTypeNameUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAppConfigurationByTypeNameUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAppConfigurationByTypeNameUsingGetQueryKey(options)
    });
};

export const changeAuth0SignKeyUsingGetQueryKey = (options: Options<ChangeAuth0SignKeyUsingGetData>) => createQueryKey('changeAuth0SignKeyUsingGet', options);

export const changeAuth0SignKeyUsingGetOptions = (options: Options<ChangeAuth0SignKeyUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await changeAuth0SignKeyUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: changeAuth0SignKeyUsingGetQueryKey(options)
    });
};

export const batchUsersUsingPostQueryKey = (options: Options<BatchUsersUsingPostData>) => createQueryKey('batchUsersUsingPost', options);

export const batchUsersUsingPostOptions = (options: Options<BatchUsersUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await batchUsersUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: batchUsersUsingPostQueryKey(options)
    });
};

export const batchUsersUsingPostMutation = (options?: Partial<Options<BatchUsersUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<BatchUsersUsingPostResponse, AxiosError<DefaultError>, Options<BatchUsersUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await batchUsersUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findOrgServiceByIdsUsingPostQueryKey = (options: Options<FindOrgServiceByIdsUsingPostData>) => createQueryKey('findOrgServiceByIdsUsingPost', options);

export const findOrgServiceByIdsUsingPostOptions = (options: Options<FindOrgServiceByIdsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findOrgServiceByIdsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findOrgServiceByIdsUsingPostQueryKey(options)
    });
};

export const findOrgServiceByIdsUsingPostMutation = (options?: Partial<Options<FindOrgServiceByIdsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<FindOrgServiceByIdsUsingPostResponse, AxiosError<DefaultError>, Options<FindOrgServiceByIdsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findOrgServiceByIdsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const clearAllUserSessionsUsingPostQueryKey = (options: Options<ClearAllUserSessionsUsingPostData>) => createQueryKey('clearAllUserSessionsUsingPost', options);

export const clearAllUserSessionsUsingPostOptions = (options: Options<ClearAllUserSessionsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await clearAllUserSessionsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: clearAllUserSessionsUsingPostQueryKey(options)
    });
};

export const clearAllUserSessionsUsingPostMutation = (options?: Partial<Options<ClearAllUserSessionsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<ClearAllUserSessionsUsingPostResponse, AxiosError<DefaultError>, Options<ClearAllUserSessionsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await clearAllUserSessionsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUserOrganizationDeviceManagerUsingPostQueryKey = (options: Options<DeleteUserOrganizationDeviceManagerUsingPostData>) => createQueryKey('deleteUserOrganizationDeviceManagerUsingPost', options);

export const deleteUserOrganizationDeviceManagerUsingPostOptions = (options: Options<DeleteUserOrganizationDeviceManagerUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await deleteUserOrganizationDeviceManagerUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: deleteUserOrganizationDeviceManagerUsingPostQueryKey(options)
    });
};

export const deleteUserOrganizationDeviceManagerUsingPostMutation = (options?: Partial<Options<DeleteUserOrganizationDeviceManagerUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<DeleteUserOrganizationDeviceManagerUsingPostResponse, AxiosError<DefaultError>, Options<DeleteUserOrganizationDeviceManagerUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserOrganizationDeviceManagerUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findOrganizationsAndRelateDataByIdsUsingPostQueryKey = (options: Options<FindOrganizationsAndRelateDataByIdsUsingPostData>) => createQueryKey('findOrganizationsAndRelateDataByIdsUsingPost', options);

export const findOrganizationsAndRelateDataByIdsUsingPostOptions = (options: Options<FindOrganizationsAndRelateDataByIdsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findOrganizationsAndRelateDataByIdsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findOrganizationsAndRelateDataByIdsUsingPostQueryKey(options)
    });
};

export const findOrganizationsAndRelateDataByIdsUsingPostMutation = (options?: Partial<Options<FindOrganizationsAndRelateDataByIdsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<FindOrganizationsAndRelateDataByIdsUsingPostResponse, AxiosError<DefaultError>, Options<FindOrganizationsAndRelateDataByIdsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findOrganizationsAndRelateDataByIdsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findOrganizationsByIdsUsingPostQueryKey = (options: Options<FindOrganizationsByIdsUsingPostData>) => createQueryKey('findOrganizationsByIdsUsingPost', options);

export const findOrganizationsByIdsUsingPostOptions = (options: Options<FindOrganizationsByIdsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findOrganizationsByIdsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findOrganizationsByIdsUsingPostQueryKey(options)
    });
};

export const findOrganizationsByIdsUsingPostMutation = (options?: Partial<Options<FindOrganizationsByIdsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<FindOrganizationsByIdsUsingPostResponse, AxiosError<DefaultError>, Options<FindOrganizationsByIdsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findOrganizationsByIdsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findOrganizationsByTagsUsingPostQueryKey = (options: Options<FindOrganizationsByTagsUsingPostData>) => createQueryKey('findOrganizationsByTagsUsingPost', options);

export const findOrganizationsByTagsUsingPostOptions = (options: Options<FindOrganizationsByTagsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findOrganizationsByTagsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findOrganizationsByTagsUsingPostQueryKey(options)
    });
};

export const findOrganizationsByTagsUsingPostMutation = (options?: Partial<Options<FindOrganizationsByTagsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<FindOrganizationsByTagsUsingPostResponse, AxiosError<DefaultError>, Options<FindOrganizationsByTagsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findOrganizationsByTagsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findOrganizationsRelateToUserUsingPostQueryKey = (options: Options<FindOrganizationsRelateToUserUsingPostData>) => createQueryKey('findOrganizationsRelateToUserUsingPost', options);

export const findOrganizationsRelateToUserUsingPostOptions = (options: Options<FindOrganizationsRelateToUserUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findOrganizationsRelateToUserUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findOrganizationsRelateToUserUsingPostQueryKey(options)
    });
};

export const findOrganizationsRelateToUserUsingPostMutation = (options?: Partial<Options<FindOrganizationsRelateToUserUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<FindOrganizationsRelateToUserUsingPostResponse, AxiosError<DefaultError>, Options<FindOrganizationsRelateToUserUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findOrganizationsRelateToUserUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const isOrgValidUsingGetQueryKey = (options: Options<IsOrgValidUsingGetData>) => createQueryKey('isOrgValidUsingGet', options);

export const isOrgValidUsingGetOptions = (options: Options<IsOrgValidUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await isOrgValidUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: isOrgValidUsingGetQueryKey(options)
    });
};

export const findOrgUsingGetQueryKey = (options: Options<FindOrgUsingGetData>) => createQueryKey('findOrgUsingGet', options);

export const findOrgUsingGetOptions = (options: Options<FindOrgUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findOrgUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findOrgUsingGetQueryKey(options)
    });
};

export const findOrgDescendantsUsingGetQueryKey = (options: Options<FindOrgDescendantsUsingGetData>) => createQueryKey('findOrgDescendantsUsingGet', options);

export const findOrgDescendantsUsingGetOptions = (options: Options<FindOrgDescendantsUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findOrgDescendantsUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findOrgDescendantsUsingGetQueryKey(options)
    });
};

export const internalSendReportUserActivityUsingPostQueryKey = (options: Options<InternalSendReportUserActivityUsingPostData>) => createQueryKey('internalSendReportUserActivityUsingPost', options);

export const internalSendReportUserActivityUsingPostOptions = (options: Options<InternalSendReportUserActivityUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await internalSendReportUserActivityUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: internalSendReportUserActivityUsingPostQueryKey(options)
    });
};

export const internalSendReportUserActivityUsingPostMutation = (options?: Partial<Options<InternalSendReportUserActivityUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<InternalSendReportUserActivityUsingPostResponse, AxiosError<DefaultError>, Options<InternalSendReportUserActivityUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await internalSendReportUserActivityUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersByEmailsUsingPostQueryKey = (options: Options<GetUsersByEmailsUsingPostData>) => createQueryKey('getUsersByEmailsUsingPost', options);

export const getUsersByEmailsUsingPostOptions = (options: Options<GetUsersByEmailsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersByEmailsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersByEmailsUsingPostQueryKey(options)
    });
};

export const getUsersByEmailsUsingPostMutation = (options?: Partial<Options<GetUsersByEmailsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<GetUsersByEmailsUsingPostResponse, AxiosError<DefaultError>, Options<GetUsersByEmailsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getUsersByEmailsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersByIdsUsingPostQueryKey = (options: Options<GetUsersByIdsUsingPostData>) => createQueryKey('getUsersByIdsUsingPost', options);

export const getUsersByIdsUsingPostOptions = (options: Options<GetUsersByIdsUsingPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersByIdsUsingPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersByIdsUsingPostQueryKey(options)
    });
};

export const getUsersByIdsUsingPostMutation = (options?: Partial<Options<GetUsersByIdsUsingPostData>>) => {
    const mutationOptions: UseMutationOptions<GetUsersByIdsUsingPostResponse, AxiosError<DefaultError>, Options<GetUsersByIdsUsingPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await getUsersByIdsUsingPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAndroidInternalUsingGetQueryKey = (options: Options<GetAndroidInternalUsingGetData>) => createQueryKey('getAndroidInternalUsingGet', options);

export const getAndroidInternalUsingGetOptions = (options: Options<GetAndroidInternalUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAndroidInternalUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAndroidInternalUsingGetQueryKey(options)
    });
};

export const getIosConnectUsingGetQueryKey = (options: Options<GetIosConnectUsingGetData>) => createQueryKey('getIosConnectUsingGet', options);

export const getIosConnectUsingGetOptions = (options: Options<GetIosConnectUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIosConnectUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIosConnectUsingGetQueryKey(options)
    });
};

export const getIosInternalUsingGetQueryKey = (options: Options<GetIosInternalUsingGetData>) => createQueryKey('getIosInternalUsingGet', options);

export const getIosInternalUsingGetOptions = (options: Options<GetIosInternalUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIosInternalUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIosInternalUsingGetQueryKey(options)
    });
};

export const pemUsingGetQueryKey = (options: Options<PemUsingGetData>) => createQueryKey('pemUsingGet', options);

export const pemUsingGetOptions = (options: Options<PemUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await pemUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: pemUsingGetQueryKey(options)
    });
};

export const invalidLinkUsingGetQueryKey = (options: Options<InvalidLinkUsingGetData>) => createQueryKey('invalidLinkUsingGet', options);

export const invalidLinkUsingGetOptions = (options: Options<InvalidLinkUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await invalidLinkUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: invalidLinkUsingGetQueryKey(options)
    });
};

export const invitationSuccessUsingGetQueryKey = (options: Options<InvitationSuccessUsingGetData>) => createQueryKey('invitationSuccessUsingGet', options);

export const invitationSuccessUsingGetOptions = (options: Options<InvitationSuccessUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await invitationSuccessUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: invitationSuccessUsingGetQueryKey(options)
    });
};

export const resetPasswordUsingGetQueryKey = (options: Options<ResetPasswordUsingGetData>) => createQueryKey('resetPasswordUsingGet', options);

export const resetPasswordUsingGetOptions = (options: Options<ResetPasswordUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordUsingGetQueryKey(options)
    });
};

export const resetPasswordPortalUsingGetQueryKey = (options: Options<ResetPasswordPortalUsingGetData>) => createQueryKey('resetPasswordPortalUsingGet', options);

export const resetPasswordPortalUsingGetOptions = (options: Options<ResetPasswordPortalUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordPortalUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordPortalUsingGetQueryKey(options)
    });
};

export const resetPasswordPortalSuccessUsingGetQueryKey = (options: Options<ResetPasswordPortalSuccessUsingGetData>) => createQueryKey('resetPasswordPortalSuccessUsingGet', options);

export const resetPasswordPortalSuccessUsingGetOptions = (options: Options<ResetPasswordPortalSuccessUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordPortalSuccessUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordPortalSuccessUsingGetQueryKey(options)
    });
};

export const resetPasswordSuccessUsingGetQueryKey = (options: Options<ResetPasswordSuccessUsingGetData>) => createQueryKey('resetPasswordSuccessUsingGet', options);

export const resetPasswordSuccessUsingGetOptions = (options: Options<ResetPasswordSuccessUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPasswordSuccessUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordSuccessUsingGetQueryKey(options)
    });
};

export const verificationSuccessUsingGetQueryKey = (options: Options<VerificationSuccessUsingGetData>) => createQueryKey('verificationSuccessUsingGet', options);

export const verificationSuccessUsingGetOptions = (options: Options<VerificationSuccessUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await verificationSuccessUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: verificationSuccessUsingGetQueryKey(options)
    });
};

export const verifyEmailUsingGetQueryKey = (options: Options<VerifyEmailUsingGetData>) => createQueryKey('verifyEmailUsingGet', options);

export const verifyEmailUsingGetOptions = (options: Options<VerifyEmailUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await verifyEmailUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: verifyEmailUsingGetQueryKey(options)
    });
};

export const verifyInvitationUsingGetQueryKey = (options: Options<VerifyInvitationUsingGetData>) => createQueryKey('verifyInvitationUsingGet', options);

export const verifyInvitationUsingGetOptions = (options: Options<VerifyInvitationUsingGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await verifyInvitationUsingGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: verifyInvitationUsingGetQueryKey(options)
    });
};